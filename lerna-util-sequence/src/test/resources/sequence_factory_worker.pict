#
# SequenceFactoryWorker が SequenceContext の状態にもとづきどのように振る舞うかケースを洗い出します
# 書き方: https://github.com/Microsoft/pict/blob/main/doc/pict.md
#
##################################################
# 条件
##################################################

# 予約済みの採番値の最大値
# - maxReservedValue > maxSequenceValue は仕様上ありえない
#
maxReservedValue: = maxSequenceValue, < maxSequenceValue

# 次に採番予定の値
nextValue: > maxReservedValue, = maxReservedValue, < maxReservedValue

# 採番可能なシーケンスの数
# - remainAmount > reservationAmount は仕様上ありえない
#
remainAmount: = reservationAmount, < reservationAmount

# 発行できるシーケンスが少なくなっているかどうか
# reservationFactor を抽象化する
#
isStarving: TRUE, FALSE

##################################################
# 結果
##################################################

# 追加で予約可能なシーケンスの数
# - freeAmount < 0 は仕様上ありえない
#
@freeAmount: > 0, = 0

# 発行できるシーケンスの最大値を超えている
@isOverflow: TRUE, FALSE

# 発行できるシーケンスがない
@isEmpty: TRUE, FALSE

@採番: する, しない

@採番値予約: する, しない

@採番値リセット: する, しない

##################################################
# 条件の制約
##################################################

# isStarving

# remainAmount = 0 の場合 isStarving は常に TRUE になる
# maxReservedValue < nextValue, maxReservedValue = nextValue の場合に remainAmount = 0 となる
#
IF [nextValue] = "> maxReservedValue" OR [nextValue] = "= maxReservedValue"
THEN [isStarving] = "TRUE";

IF [@isEmpty] = "TRUE"
THEN [isStarving] = "TRUE";

##################################################
# 結果の条件
##################################################

# @freeAmount

IF [maxReservedValue] = "= maxSequenceValue"
THEN [@freeAmount] = "= 0";

IF [maxReservedValue] = "< maxSequenceValue" AND [remainAmount] = "= reservationAmount"
THEN [@freeAmount] = "= 0";

IF [maxReservedValue] = "< maxSequenceValue" AND [remainAmount] = "< reservationAmount"
THEN [@freeAmount] = "> 0";

# @isOverflow

IF [maxReservedValue] = "= maxSequenceValue" AND [nextValue] = "> maxReservedValue"
THEN [@isOverflow] = "TRUE";

IF [maxReservedValue] = "= maxSequenceValue" AND [nextValue] in { "= maxReservedValue", "< maxReservedValue" }
THEN [@isOverflow] = "FALSE";

IF [maxReservedValue] = "< maxSequenceValue"
THEN [@isOverflow] = "FALSE";

# @isEmpty

IF [nextValue] = "> maxReservedValue"
THEN [@isEmpty] = "TRUE"
ELSE [@isEmpty] = "FALSE";

# @採番
# 採番と、採番値予約/リセット で SequenceContext の状態が評価されるタイミングが異なることに注意してください
# 採番するかどうかは採番前の SequenceContext にもとづき決定しますが、
# 採番値予約/リセットするかどうかは採番後の SequenceContext（nextValue がインクリメントされたもの）にもとづき決定します

IF [@isEmpty] = "TRUE"
THEN [@採番] = "しない"
ELSE [@採番] = "する";

# @採番値予約

IF [@isOverflow] = "FALSE" AND [@freeAmount] = "> 0" AND [isStarving] = "TRUE"
THEN [@採番値予約] = "する";

IF [@isOverflow] = "FALSE" AND [@freeAmount] = "> 0" AND [@isEmpty] = "TRUE"
THEN [@採番値予約] = "する";

IF [@isOverflow] = "FALSE" AND [@freeAmount] = "= 0"
THEN [@採番値予約] = "しない";

IF [@isOverflow] = "FALSE" AND [isStarving] = "FALSE" AND [@isEmpty] = "FALSE"
THEN [@採番値予約] = "しない";

IF [maxReservedValue] = "= maxSequenceValue" AND [@isEmpty] = "TRUE"
THEN [@採番値予約] = "しない";

# @採番値リセット

IF [@isOverflow] = "TRUE" AND [@isEmpty] = "TRUE"
THEN [@採番値リセット] = "する"
ELSE [@採番値リセット] = "しない";


# ❯ cat sequence_factory_worker.pict | docker run --rm -i ghcr.io/iceomix/pict -o:10 | column --table -s $'\t' | cat -n | sed -E 's/^/# /'
#
# -o: オプションで条件数と同じ数を指定することで全網羅パターンを出力できる。（デフォルトではペアワイズ法によりケースが絞られる）
# 参考：
# ペアワイズ法によるテストケース抽出ツール「PICT」を使ってテストケースを85%削減する - Qiita
# https://qiita.com/bremen/items/6eceddc534d87fc797cc
#
#      1	maxReservedValue    nextValue           remainAmount         isStarving  @freeAmount  @isOverflow  @isEmpty  @採番   @採番値予約  @採番値リセット
#      2	< maxSequenceValue  > maxReservedValue  = reservationAmount  TRUE        = 0          FALSE        TRUE      しない  しない       しない
#      3	= maxSequenceValue  < maxReservedValue  = reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#      4	< maxSequenceValue  > maxReservedValue  < reservationAmount  TRUE        > 0          FALSE        TRUE      しない  する         しない
#      5	< maxSequenceValue  < maxReservedValue  < reservationAmount  FALSE       > 0          FALSE        FALSE     する    しない       しない
#      6	< maxSequenceValue  = maxReservedValue  < reservationAmount  TRUE        > 0          FALSE        FALSE     する    する         しない
#      7	< maxSequenceValue  < maxReservedValue  = reservationAmount  FALSE       = 0          FALSE        FALSE     する    しない       しない
#      8	= maxSequenceValue  = maxReservedValue  < reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#      9	< maxSequenceValue  = maxReservedValue  = reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#     10	< maxSequenceValue  < maxReservedValue  < reservationAmount  TRUE        > 0          FALSE        FALSE     する    する         しない
#     11	< maxSequenceValue  < maxReservedValue  = reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#     12	= maxSequenceValue  > maxReservedValue  = reservationAmount  TRUE        = 0          TRUE         TRUE      しない  しない       する
#     13	= maxSequenceValue  > maxReservedValue  < reservationAmount  TRUE        = 0          TRUE         TRUE      しない  しない       する
#     14	= maxSequenceValue  = maxReservedValue  = reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#     15	= maxSequenceValue  < maxReservedValue  = reservationAmount  FALSE       = 0          FALSE        FALSE     する    しない       しない
#     16	= maxSequenceValue  < maxReservedValue  < reservationAmount  FALSE       = 0          FALSE        FALSE     する    しない       しない
#     17	= maxSequenceValue  < maxReservedValue  < reservationAmount  TRUE        = 0          FALSE        FALSE     する    しない       しない
#
# プレフィックス "@" が付いてない条件の組み合わせに重複がある場合、「結果の条件」の定義に漏れがあることがわかる。
#
# ❯ cat *.pict | docker run --rm -i ghcr.io/iceomix/pict -o:10 | cut -f 1,2,3,4 | sort | uniq --repeated | wc -l
# 0
#
