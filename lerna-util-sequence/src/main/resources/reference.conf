lerna.util.sequence {

  # ノードID。一番最初に生成されるシーケンス値になる。複数ノードある場合はそれぞれでユニークな値を指定すること
  node-id = 1

  # 将来スケールできるノードIDの上限値。生成されるシーケンス値の公差になる。
  # この値を変更すると一意のシーケンスを生成できる保証ができないため、一度指定したら Cassandra のデータを初期化しない限りは変更不可。
  max-node-id = 9

  # シーケンスの生成にかかる時間のタイムアウト値
  generate-timeout = 10s

  # 確保したシーケンスをインメモリに持つ、ワーカーを開放するまでの時間
  worker.idle-timeout = 10s

  worker.stash-capacity = 1000
  store.stash-capacity = 1000

  cassandra {
    tenants = {
      // example = ${lerna.util.sequence.cassandra.default}
    }
    default {
      # コンタクトポイント
      contact-points = ["127.0.0.1"]

      # シーケンスに関する情報を保存するキースペース
      keyspace = "sequence"

      # シーケンスの確保済み最大値を永続化するテーブル
      table = "sequence_reservation"

      # 書き込み時の整合性レベル
      # see com.datastax.driver.core.ConsistencyLevel
      write-consistency = QUORUM

      # insert など書き込みの失敗でリトライする回数
      write-retries = 3

      # 読み込み時の整合性レベル
      # see com.datastax.driver.core.ConsistencyLevel
      read-consistency = QUORUM

      # select など読み込みの失敗でリトライする回数
      read-retries = 3

      # キースペースのレプリケーション係数
      data-center-replication-factors = [
        "datacenter1:1"
      ]

      # 接続先を指定したローカルデータセンターに制限する設定
      # この設定を有効にした場合は DCAwareRoundRobinPolicy を使用する
      # この設定を指定しない場合はデフォルトで Datastax 標準 の RoundRobinPolicy が使われる
      # マルチデータセンター構成でより効率的に処理するためには設定を推奨
      local-datacenter = ""

      # 認証
      authentication {
        # ユーザー名
        username = "cassandra"
        # パスワード
        password = "cassandra"
      }

      # See: https://docs.datastax.com/en/developer/java-driver/3.6/manual/socket_options/#socket-options
      socket {

        # コネクションを確立するまでのタイムアウト
        connection-timeout = 5000 millis

        # ホストごとの read timeout。Cassandra 側のタイムアウト時間よりも大きい値を設定すること
        # 最悪の場合、１つのクエリの実行で read-timeout * (write-retries or read-retires) の時間がかかる
        read-timeout = 12000 millis
      }
    }
  }
}
