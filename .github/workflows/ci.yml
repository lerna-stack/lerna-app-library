name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SBT_SCALAC_STRICT_WARNINGS: true

jobs:
  test:

    runs-on: ubuntu-latest

    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          # sbt-dynver (used by sbt-ci-release) detects the previous version by tag:
          # https://github.com/dwijnand/sbt-dynver/tree/v4.1.1#previous-version-detection
          fetch-depth: 0

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # https://www.scala-sbt.org/1.x/docs/GitHub-Actions-with-sbt.html#Caching
      - name: Coursier cache
        uses: coursier/cache-action@v5

      - name: Check code format
        run: sbt scalafmtCheckAll scalafmtSbtCheck

      # Detect compilation errors early
      - name: Compile
        run: sbt clean compile test:compile

      - name: Check binary compartibility
        run: sbt mimaReportBinaryIssues

      # https://github.com/marketplace/actions/docker-layer-caching
      - name: Pull the latest docker image
        run: docker-compose pull cassandra
      - name: Docker layer cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build the docker-compose stack
        run: docker-compose up --build -d cassandra

      - name: Run tests
        continue-on-error: true # results are reported by action-junit-report
        run: sbt coverage test

      - name: Publish test report
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: ScalaTest Report
          report_paths: 'lerna-*/target/test-reports/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check the test coverage is above the minimum criteria
        run: sbt coverageAggregate

        # https://www.scala-sbt.org/1.x/docs/GitHub-Actions-with-sbt.html#Caching
      - name: Clean files for caching
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/Library/Caches/Coursier/v1        -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true
